/**
 * @overview generated by ghoti-cli
 * @fileoverview Root Route
 */

import { ipcRenderer } from 'electron';

import * as React from "react";

import Config from "../../config/config";

import Lunuh from '../components/lunuh';

import * as Cheerio from 'cheerio';
import Dropper from '../components/dropper';
import Loading from '../components/loading';
import printToString, { Print } from './print';

import * as fs from 'fs';
import * as path from 'path';
import { cleanImageList, comparePictureName, getInner, removeExtName } from '../lambda/parser';
import { availableDivider, IEach, IParsed } from './interface';

import Markus from 'markus-sdk-node';

export interface IState {
    mode: "drag" | "export";
    filePath: string;
    repairBaseId: string;
    imageDevider: availableDivider;
}

class Root extends React.Component<{}, IState> {
    private $: CheerioStatic;
    private inner: IParsed;

    public constructor(props: {}) {
        super(props);
        this.state = {
            mode: "drag",
            filePath: '',
            repairBaseId: "",
            imageDevider: '+',
        };
        this.inner = null;
        this.onDrop = this.onDrop.bind(this);
        this.onLoad = this.onLoad.bind(this);
        this.saveFile = this.saveFile.bind(this);
        this.renderInfo = this.renderInfo.bind(this);

        this.preparePictureList = this.preparePictureList.bind(this);

        this.parseOuterStatus = this.parseOuterStatus.bind(this);
        this.getExample = this.getExample.bind(this);
    }

    public render(): any {
        switch (this.state.mode) {
            case 'drag':
                return (<div className="entire theme-bg">
                    <Dropper onDrop={this.onDrop} onLoad={this.onLoad} />
                </div>);
            case 'export':
                return (<div className="entire theme-bg">
                    {this.renderInfo()}
                </div>);
            default:
                return (<div className="entire theme-bg">
                    404
            </div>);
        }
    }

    protected saveFile() {
        ipcRenderer.send('save-file', 'test', printToString(this.inner, this.state.repairBaseId));
    }

    protected onDrop() {
        this.setState({
            mode: 'export',
        });
    }

    /**
     * When file loaded
     *
     * @protected
     * @param {string} content
     * @param {string} filePath
     * @memberof Root
     */
    protected onLoad(content: string, filePath: string) {
        this.setState({
            filePath: path.join(filePath, '..'),
        });
        this.$ = Cheerio.load(content);


        /**
         * UPDATE
         * prepare here, prepare picture list everytime change rendertype
         */
        this.parseOuterStatus();
        setTimeout(() => {
            this.forceUpdate();
        }, 0);
    }

    /**
     * TOTOTOTODO USE COMPARE PICTURENAME INSTEAD LATER
     *
     * @protected
     * @memberof Root
     */
    protected preparePictureList() {

        let pictList: string[] = [];
        let fullPickList: string[] = [];
        const filePath = this.state.filePath;
        let stat = fs.statSync(filePath);

        let parsedList: Array<{
            name: string;
            used: boolean;
        }>;

        if (stat.isDirectory()) {
            pictList = fs.readdirSync(filePath);
            fullPickList = fs.readdirSync(filePath);

            parsedList = pictList.map((value) => {
                return {
                    name: value,
                    used: false,
                };
            });

            // template new mode [outer]-[number]-[any]

            parsedList = cleanImageList(parsedList);

            this.inner.totalImage = parsedList.length;

            for (let i of this.inner.list) {
                for (let j of i.each) {
                    for (let pict of parsedList) {
                        if (comparePictureName(pict.name, i.cate, j.item, this.state.imageDevider)) {
                            let realPath = path.join(filePath, pict.name);
                            if (!j.image) {
                                j.image = [];
                            }
                            pict.used = true;
                            j.image.push({
                                name: removeExtName(pict.name),
                                src: realPath,
                            });
                        }
                    }
                }
            }

            // 我不知道这个能不能用，我没有测试过
            const markus = new Markus('你的服务器地址')
            markus.UploadMultipleBuffer(parsedList.map((value) => {
                const buffer = fs.readFileSync(path.join(filePath, value.name));
                return buffer;
            }), 'prefix', '.jpeg', ['test', 'tag'], (count: number) => {

                // 每上传一张就触发一次
                console.log(count);
            }, 'test').then((result) => {
                // 上传成功了
                console.log(result);
            }).catch((err) => {
                // 发生错误的时候触发
                console.error(err);
            });

            // 这之下的代码，想办法让他能获得文件名，来定位
            // if (pict.name.substring(0, 1) === '1') {
            //     this.inner.unused.Exterior.push({
            //         name: removeExtName(pict.name),
            //         src: realPath,
            //     });
            // } else if (pict.name.substring(0, 1) === '2') {
            //     this.inner.unused.Interior.push({
            //         name: removeExtName(pict.name),
            //         src: realPath,
            //     });
            // } else {
            //     this.inner.unused.Other.push({
            //         name: removeExtName(pict.name),
            //         src: realPath,
            //     });
            // }
            // 以上

            // for (let pict of parsedList) {

            // // LOGGING
            // // console.log(pict);
            // if (path.extname(pict.name).toLowerCase() !== '.jpg' && path.extname(pict.name).toLowerCase() !== '.jpeg') {
            //     continue;
            // }
            // if (!pict.used) {
            //     let realPath = path.join(filePath, pict.name);
            //    
            // }
            // }

            // for (let i of this.inner.list) {
            //     for (let j of i.each) {
            //         for (let eaIndex = 0; eaIndex < pictList.length; eaIndex++) {
            //             let ea = pictList[eaIndex];
            //             let count = 0;
            //             for (let k of j.description.split(' ')) {
            //                 if (ea.indexOf(k) !== -1) {
            //                     count++;
            //                 }
            //             }
            //             if ((count / ea.split(' ').length) > 0.8) {
            //                 if (!j.image) {
            //                     j.image = [];
            //                 }
            //                 // TODO!!!
            //                 if (j.image.length < 3) {
            //                     j.image.push({
            //                         name: fullPickList[eaIndex],
            //                         src: path.join(this.state.filePath, fullPickList[eaIndex]),
            //                     });
            //                 }
            //                 // TODO!!!
            //                 // j.image.push({
            //                 //     name: fullPickList[eaIndex],
            //                 //     src: path.join(this.state.filePath, fullPickList[eaIndex]),
            //                 // });
            //             }
            //         }
            //     }
            // }
        }
    }

    protected parseOuterStatus() {
        let entireList: IEach[] = getInner(this.$('#box-table-b').find('.tahoma12-gray'));

        let objList = this.$('.tahoma14-gold');

        let a = this.$('table').first();
        a = a.children().eq(0).children().eq(0).children().eq(1).children().eq(0).children().eq(0).children().eq(0).children().eq(0).children().eq(3).children().eq(1).children().eq(0);
        a = a.children(); // tobody outer with start perptory estimate
        a = a.eq(1).children().eq(0).children().eq(0).children().eq(0).children(); // in side list
        // a = a.eq(3); // first three tr are empty // NAMES
        // a = a.eq(4); // 4 = edit estimate button, 5 = first title, 6 = first content
        // 7 = second title, 8 = second content

        a = a.eq(3).children().eq(2).children().eq(0).children().eq(0).children(); // name/ address/ shits

        let name = a.eq(0).children().eq(1).text();
        let address = a.eq(1).children().eq(1).text();
        let city = a.eq(2).children().eq(1).text();
        let year = a.eq(3).children().eq(1).text();
        let stories = a.eq(4).children().eq(1).text();
        let area = a.eq(5).children().eq(1).text();
        let totalCost = a.eq(6).children().eq(1).text();

        let bdate = this.$('#bdate').text().trim();

        this.inner = {
            name,
            address,
            city,
            year,
            stories,
            area,
            totalCost,
            bdate,
            list: [],
            totalImage: 0,
            unused: {
                Exterior: [],
                Interior: [],
                Other: [],
            },
        };
        let count = 5;
        let lim = 0;
        let temp: {
            cate: string;
            each: IEach[];
        };
        let escape = 0;
        for (let i = 0; i < entireList.length; escape++) {
            if (escape > 1000) {
                return;
            }
            if (entireList[i].item <= count) {
                count = 0;
                if (temp) {
                    this.inner.list.push(temp);
                }
                temp = {
                    cate: objList.eq(lim++).text().trim(),
                    each: [],
                };
            } else {
                temp.each.push(entireList[i]);
                count = entireList[i++].item;
            }
        }
        if (temp) {
            this.inner.list.push(temp);
        }

        this.preparePictureList();
    }

    protected getExample() {
        let imageExample: string;

        switch (this.state.imageDevider) {
            case '_':
                imageExample = 'Exterior Indoor_4_(2).jpg';
                break;
            case '-':
                imageExample = 'Basement-8.jpg (Not Suggested)';
                break;
            case '+':
                imageExample = 'Interior+3+Backup.jpg';
                break;
        }

        let unusedLength = this.inner.unused.Exterior.length + this.inner.unused.Interior.length + this.inner.unused.Other.length;

        return (<div style={{ marginTop: '5px' }}>
            <div><i className="fas fa-question-circle"></i>&nbsp;{imageExample}</div>
            <div>Matched: {this.inner.totalImage - unusedLength}/Total: {this.inner.totalImage}</div>
        </div>);
    }

    protected renderInfo() {
        if (this.$) {
            return (
                <div className="dropped-info">
                    <div className="info">
                        <table className="info-table">
                            <tbody>
                                {this.getTr("Name", this.inner.name)}
                                {this.getTr("Address", this.inner.address)}
                                {/* {this.getTr("Year", this.inner.year)}
                                {this.getTr("Stories", this.inner.stories)}
                                {this.getTr("Area", this.inner.area)} */}
                                {this.getTr("Total Cost", this.inner.totalCost, true)}
                                {this.getTr("Image Path", this.state.filePath)}
                                <tr>
                                    <td colSpan={2} style={{
                                        padding: '4px',
                                    }}>
                                        <div className="lunuh-v1-paper">
                                            <div className="lunuh-v1-title">Image Controller</div>
                                            <div className="group inner-group">
                                                <button
                                                    className={this.state.imageDevider === '_' ? "selected" : ""}
                                                    onClick={() => {
                                                        (this.state.imageDevider as any) = '_';
                                                        this.parseOuterStatus();
                                                        this.forceUpdate();
                                                    }}>
                                                    Under | _
                                                </button>
                                                <button
                                                    className={this.state.imageDevider === '+' ? "selected" : ""}
                                                    onClick={() => {
                                                        (this.state.imageDevider as any) = '+';
                                                        this.parseOuterStatus();
                                                        this.forceUpdate();
                                                    }}>
                                                    Plus | +
                                                </button>
                                                <button
                                                    className={this.state.imageDevider === '-' ? "selected" : ""}
                                                    onClick={() => {
                                                        (this.state.imageDevider as any) = '-';
                                                        this.parseOuterStatus();
                                                        this.forceUpdate();
                                                    }}>
                                                    Dash | -
                                                </button>
                                            </div>
                                            {this.getExample()}
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colSpan={2} style={{
                                        padding: '4px',
                                    }}>
                                        <div className="lunuh-v1-paper">
                                            <div className="lunuh-v1-title">RepairBase ID</div>
                                            <div className="lunuh-v1-container">
                                                <a
                                                    className="lunuh-v1-a-info"
                                                    title="Id will not rendered if the following input box is empty">
                                                    <i className="fas fa-info"></i>
                                                </a>
                                                <input
                                                    type="text"
                                                    value={this.state.repairBaseId}
                                                    className="lunuh-v1-input l-left"
                                                    placeholder="RepairBase ID"
                                                    style={{
                                                        width: '80%',
                                                    }}
                                                    onChange={(e) => {
                                                        this.setState({
                                                            repairBaseId: e.target.value,
                                                        });
                                                    }} />
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        {/* <div>
                            <button className="select-img-path-button">
                                <i className="fas fa-image"></i>&nbsp;
                                Select Picture Path
                            </button>
                        </div> */}
                    </div>

                    <div className="group">
                        <button onClick={() => {
                            this.$ = null;
                            this.setState({
                                mode: "drag",
                            });
                        }}>
                            <i className="fas fa-redo-alt"></i>&nbsp;Redo
                        </button>
                        <button onClick={this.saveFile}>
                            <i className="fas fa-file-pdf"></i>&nbsp;Export
                        </button>
                    </div>
                </div>
            );
        } else {
            return (<Loading loading />);
        }
    }

    protected getTr(name: string, info: string, bold?: boolean) {
        return (<tr>
            <td style={{
                minWidth: '50px',
                fontWeight: bold ? "bold" : "normal",
                paddingLeft: '4px',
                paddingRight: '4px',
            }}>{name}</td>
            <td style={{
                fontWeight: bold ? "bold" : "normal",
                paddingLeft: '4px',
                paddingRight: '4px',
            }}>{info}</td>
        </tr>);
    }
}

export default Root;
